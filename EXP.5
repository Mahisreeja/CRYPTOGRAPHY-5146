import math

# Function to compute modular inverse of a under modulo m
def mod_inverse(a, m):
    a = a % m
    for x in range(1, m):
        if (a * x) % m == 0:
            return x
    return None

# Function to check if two numbers are coprime
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Function to encrypt text using affine cipher
def affine_encrypt(text, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("a and 26 are not coprime, so 'a' does not have an inverse. Choose a different 'a'.")
    
    result = ""
    for char in text:
        if char.isalpha():
            char = char.upper()
            p = ord(char) - ord('A')
            c = (a * p + b) % 26
            result += chr(c + ord('A'))
        else:
            result += char
    return result

# Function to decrypt text using affine cipher
def affine_decrypt(cipher, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("a and 26 are not coprime, so 'a' does not have an inverse. Choose a different 'a'.")
    
    result = ""
    a_inv = mod_inverse(a, 26)
    if a_inv is None:
        raise ValueError("Modular inverse of 'a' does not exist.")
    
    for char in cipher:
        if char.isalpha():
            char = char.upper()
            c = ord(char) - ord('A')
            p = (a_inv * (c - b)) % 26
            result += chr(p + ord('A'))
        else:
            result += char
    return result

def main():
    while True:
        choice = input("Do you want to (e)ncrypt or (d)ecrypt? (Type 'exit' to quit): ").strip().lower()
        if choice == 'exit':
            break
        if choice not in ('e', 'd'):
            print("Invalid choice, please choose 'e' to encrypt or 'd' to decrypt.")
            continue

        a = int(input("Enter the value of a (must be coprime with 26): ").strip())
        b = int(input("Enter the value of b: ").strip())
        text = input("Enter the text: ").strip()
        
        if choice == 'e':
            result = affine_encrypt(text, a, b)
        else:
            result = affine_decrypt(text, a, b)

        print(f"The resulting text is: {result}")

if __name__ == "__main__":
    main()
