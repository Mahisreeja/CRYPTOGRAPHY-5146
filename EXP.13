import numpy as np

def text_to_matrix(text):
    # Convert text to numerical matrix where A=0, B=1, ..., Z=25
    text = text.replace(' ', '').upper()
    return np.array([ord(char) - ord('A') for char in text])

def hill_decrypt(ciphertext, key_matrix):
    # Decrypt ciphertext using Hill cipher with key_matrix
    ciphertext_matrix = text_to_matrix(ciphertext)
    key_matrix = np.array(key_matrix)
    
    # Calculate the determinant of key_matrix modulo 26
    determinant = int(round(np.linalg.det(key_matrix))) % 26
    
    # Find the modular inverse of determinant modulo 26
    inverse_determinant = None
    for i in range(1, 26):
        if (determinant * i) % 26 == 1:
            inverse_determinant = i
            break
    if inverse_determinant is None:
        return "There is no solution for the given ciphertext and this key."
    
    # Calculate the adjugate of key_matrix modulo 26
    adjugate = np.array([[key_matrix[1][1], -key_matrix[0][1]], [-key_matrix[1][0], key_matrix[0][0]]])
    adjugate = (adjugate * inverse_determinant) % 26
    
    # Calculate the inverse of key_matrix modulo 26
    key_matrix_inv = adjugate % 26
    
    # Decrypt ciphertext matrix
    plaintext_matrix = np.dot(ciphertext_matrix, key_matrix_inv) % 26
    
    # Convert numerical matrix back to text
    plaintext = ''.join([chr(int(val) + ord('A')) for val in plaintext_matrix.flatten()])
    
    return plaintext

def known_plaintext_attack(plaintexts, ciphertexts):
    # Perform known plaintext attack to find the key matrix
    if len(plaintexts) != len(ciphertexts):
        raise ValueError("Number of plaintexts must be equal to number of ciphertexts.")
    
    num_pairs = len(plaintexts)
    
    # Convert plaintexts and ciphertexts to numerical matrices
    plaintext_matrices = np.array([text_to_matrix(p) for p in plaintexts])
    ciphertext_matrices = np.array([text_to_matrix(c) for c in ciphertexts])
    
    # Construct matrix A and vector B for the system of linear equations
    A = np.zeros((2 * num_pairs, 4))
    B = np.zeros((2 * num_pairs, 1))
    
    for i in range(num_pairs):
        p1, p2 = plaintext_matrices[i][0], plaintext_matrices[i][1]
        c1, c2 = ciphertext_matrices[i][0], ciphertext_matrices[i][1]
        
        A[2*i] = [p1, p2, 0, 0]
        B[2*i] = c1
        
        A[2*i + 1] = [0, 0, p1, p2]
        B[2*i + 1] = c2
    
    # Solve the system of linear equations to find the key matrix
    key_vector = np.dot(np.linalg.pinv(A), B)
    
    # Reshape key_vector into key matrix
    key_matrix = np.array([[int(key_vector[0][0]), int(key_vector[1][0])],
                           [int(key_vector[2][0]), int(key_vector[3][0])]])
    
    return key_matrix

def main():
    # Given plaintext-ciphertext pairs
    plaintexts = [
        "MEETMEATTHEUSUALPLACEATTENRATHERTHANEIGHTOCL",
        "TESTCIPHERKEYISCOMPLICATEDBUTIHAVESOMECOMINGU"
    ]
    
    ciphertexts = [
        "EHJOTDBOQHEQHCAERFXPOQTRMNORLRCJHMDXSWHNCQOQ",
        "ITNKBCLZKCLCFWVBJIHZQDYZAZARHRLNEBYGQKAAVEXE"
    ]
    
    # Perform known plaintext attack to find the key matrix
    key_matrix = known_plaintext_attack(plaintexts, ciphertexts)
    print("Derived Key Matrix:")
    print(key_matrix)
    print()
    
    # Decrypt a ciphertext using the derived key matrix
    ciphertext_to_decrypt = "EHJOTDBOQHEQHCAERFXPOQTRMNORLRCJHMDXSWHNCQOQ"
    decrypted_message = hill_decrypt(ciphertext_to_decrypt, key_matrix)
    print("Decrypted Message:")
    print(decrypted_message)

if __name__ == "__main__":
    main()
