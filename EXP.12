import numpy as np

def text_to_matrix(text):
    # Convert text to numerical matrix where A=0, B=1, ..., Z=25
    text = text.replace(' ', '').upper()
    return np.array([ord(char) - ord('A') for char in text])

def matrix_to_text(matrix):
    # Convert numerical matrix back to text
    return ''.join([chr(int(val) % 26 + ord('A')) for val in matrix])

def hill_encrypt(plaintext, key_matrix):
    # Encrypt plaintext using Hill cipher with key_matrix
    plaintext_matrix = text_to_matrix(plaintext)
    key_matrix = np.array(key_matrix)
    
    # Check if the length of plaintext_matrix is divisible by the size of key_matrix
    if len(plaintext_matrix) % key_matrix.shape[0] != 0:
        raise ValueError("Plaintext length must be divisible by key matrix size.")
    
    # Reshape plaintext_matrix into pairs of numbers
    plaintext_matrix = plaintext_matrix.reshape(-1, key_matrix.shape[0])
    
    # Perform matrix multiplication and modulo 26
    encrypted_matrix = np.dot(plaintext_matrix, key_matrix) % 26
    
    # Flatten encrypted_matrix into a single list
    encrypted_text = matrix_to_text(encrypted_matrix.flatten())
    
    return encrypted_text

def hill_decrypt(ciphertext, key_matrix):
    # Decrypt ciphertext using Hill cipher with key_matrix
    ciphertext_matrix = text_to_matrix(ciphertext)
    key_matrix = np.array(key_matrix)
    
    # Calculate the modular inverse of key_matrix modulo 26
    determinant = int(round(np.linalg.det(key_matrix))) % 26
    inverse_determinant = None
    for i in range(1, 26):
        if (determinant * i) % 26 == 1:
            inverse_determinant = i
            break
    if inverse_determinant is None:
        return "There is no solution for the given ciphertext and this key."
    
    # Calculate the adjugate of key_matrix modulo 26
    adjugate = np.array([[key_matrix[1][1], -key_matrix[0][1]], [-key_matrix[1][0], key_matrix[0][0]]])
    adjugate = (adjugate * inverse_determinant) % 26
    
    # Calculate the inverse of key_matrix modulo 26
   
